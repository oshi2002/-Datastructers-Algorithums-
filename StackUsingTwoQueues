package stackusingtwoqueues;

import java.util.LinkedList;
import java.util.Queue;

public class StackUsingTwoQueues {
    private Queue<Integer> queue1; // Main queue
    private Queue<Integer> queue2; // Temporary queue

    public StackUsingTwoQueues() {
        queue1 = new LinkedList<>();
        queue2 = new LinkedList<>();
    }
     // Push element to the stack
    public void push(int value) {
        // Add the new value to queue2
        queue2.add(value);
        // Move all elements from queue1 to queue2
        while (!queue1.isEmpty()) {
            queue2.add(queue1.remove());
        }
        // Swap the queues
        Queue<Integer> temp = queue1;
        queue1 = queue2;
        queue2 = temp;
    }
    // Remove the top element from the stack
    public int pop() {
        if (queue1.isEmpty()) {
            System.out.println("Stack is empty.");
            return -1;
        }
        return queue1.remove();
    }

    // Get the top element of the stack
    public int top() {
        if (queue1.isEmpty()) {
            System.out.println("Stack is empty.");
            return -1;
        }
        return queue1.peek();
    }
    // Check if the stack is empty
    public boolean isEmpty() {
        return queue1.isEmpty();
    }
    public static void main(String[] args) {
        StackUsingTwoQueues stack = new StackUsingTwoQueues();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        System.out.println("Top element: " + stack.top()); // Output: 30
        System.out.println("Popped element: " + stack.pop()); // Output: 30
        System.out.println("Top element after pop: " + stack.top()); // Output: 20

        stack.pop();
        stack.pop();
        System.out.println("Is stack empty? " + stack.isEmpty()); // Output: true
    }
    
}
